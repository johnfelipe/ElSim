#!/usr/bin/env node

/** Module to set-up the server. */
let app = require('../app');
let debug = require('debug')('Backend:server');
let http = require('http');

/** Normalize a port into a number, string, or false. */
const normalizePort = (val) => {
    let port = parseInt(val, 10);
    if (isNaN(port)) {
        return val;
    }
    if (port >= 0) {
        return port;
    }
    return false;
};

let port = normalizePort(process.env.PORT || '3000');

app.set('port', port);

/** Create HTTP server. */
let server = http.createServer(app);


/** Event listener for HTTP server "error" event. */
const onError = (error) => {
    if (error.syscall !== 'listen') {
        throw error;
    }

    let bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;

    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
};

/** Event listener for HTTP server "listening" event. */
const onListening = () => {
    let addr = server.address();
    let bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    debug('Listening on ' + bind);
};

/** Listen on provided port, on all network interfaces. */
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);