'use strict';
const Log = require('./../../models/log'),
    Graphic = require('./../graphics/graphic-module'),
    Result = require('./../../models/result'),
    District = require('./../district-module');

module.exports = {
    indexGetFunction: function (req, res) {
        Log.find({}, haveLog);
        function haveLog(err, data) {
            if (err) throw err;
            var options = {
                title: 'Welcome Page',
                logs: data,
                moment: require('moment')
            };
            res.render('pages/index', options);
        }
    },


    /**
     * Help route.
     */
    helpGetFunction: function (req, res) {
        var options = {
            title: 'Help Page'
        };
        res.render('pages/help', options);
    },

    /**
     * Leaflet Example Route
     */
    leafletExampleGetFunction: function (req, res) {
        var options = {
            title: 'LeafletJS example'
        };
        res.render('pages/leaflet-example', options);
    },

    /**
     * GET Form to create graphs with stored results
     */
    graphicFormGetFunction: function (req, res) {
        Result.find({}, haveResult);
        function haveResult(err, data) {
            if (err) throw err;
            var options = {
                title: 'Create a graphic!',
                results: data
            };
            res.render('pages/graphic-form', options);
        }
    },

    /**
     * GET Learn
     */
    learnGetFunction: function (req, res) {
        var options = {
            title: 'Learn'
        };
        res.render('pages/learn', options);
    },

    /**
     * GET Add data
     */
    addDataGetFunction: function (req, res) {
        var options = {
            title: 'Add data',
            error: 'NO',
            codigos: require('./../../codigos')
        };
        res.render('pages/add-data', options);
    },

    /**
     * POST Add data
     */
    addDataPostFunction: function (req, res) {
        var lines = req.param('votes').split('\n');
        var partidos = {}, aux;
        for (var i = 0, len = lines.length; i < len; i++) {
            aux = lines[i].split(' ');
            partidos[aux[0].replace(/(\r\n|\n|\r)/gm, "")] = aux[2].replace(/(\r\n|\n|\r)/gm, "");
        }
        var result = new Result({
            comunidad: 'desconocida',
            cod_provincia: req.param('province'),
            provincia: 'desconocida',
            poblacion: req.param('population'),
            num_mesas: req.param('tables'),
            total_censo_electoral: req.param('census'),
            total_votantes: req.param('voters'),
            votos_validos: 0,
            votos_candidaturas: 0,
            votos_blanco: req.param('blancos'),
            votos_nulos: req.param('nulos'),
            eleccion: {
                autor: req.param('author'),
                fecha: req.param('date')
            },
            partidos: partidos
        });
        result.save(function (err) {
            if (err) throw err;
            var options = {
                title: 'Add data',
                error: 'NO',
                codigos: require('./../../codigos')
            };
            res.render('pages/add-data', options);
        });

    },

    /**
     * GET Delete data
     */
    deleteDataGetFunction: function (req, res) {
        Result.find({}, function (err, data) {
            var options = {
                title: 'Delete data',
                error: 'NO',
                data: data
            };
            res.render('pages/delete-data', options);
        });

    },
    /**
     * POST Delete data
     */
    deleteDataPostFunction: function (req, res) {

        for (var i = 0, len = req.param('results').length; i < len; i++) {
            Result.remove({_id: req.param('results')[i]}, function (err) {
                if (err) throw err;
            });
        }
        Result.find({}, function (err, data) {
            var options = {
                title: 'Delete data',
                error: 'NO',
                data: data
            };
            res.render('pages/delete-data', options);
        });
    },


    /**
     * POST show the graph generated by the form
     */
    graphicFormPostFunction: function (req, res) {
        var c = new Graphic(),
            d = new District(),
            votes = [],
            resultados = [],
            aux = {},
            mode = req.body.mode,
            mandates = req.body.mandates,
            id = req.body.resultSelected;

        Result.find({_id: id}, haveResult);

        function haveResult(err, data) {
            if (err) throw err;
            Object.keys(data[0].partidos).forEach(iteration);

            function iteration(key) {
                votes.push(data[0].partidos[key]);
                aux = {
                    partido: key,
                    votes: data[0].partidos[key],
                    mandates: 0
                };
                resultados.push(aux);
            }

            d.mandates = mandates;
            d.votes = votes;
            d.compute();

            for (var i = 0, len = d.results.length; i < len; i++) resultados[i].mandates = d.results[i];

            if (mode === 'bar') c.createBar(resultados, done);
            if (mode === 'pie') c.createPie(resultados, done);

            function done() {
                var options = {
                    title: 'Graphic Example',
                    autor: data[0].eleccion.autor,
                    fecha: data[0].eleccion.fecha,
                    provincia: data[0].cod_provincia,
                    options: c.options
                };
                res.render('pages/graphic', options);
            }
        }
    }
};
